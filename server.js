const express = require('express');
const http = require('http');
const socketIO = require('socket.io');
const path = require('path');

const app = express();
const server = http.createServer(app);
const io = socketIO(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

// Static dosyalarÄ± serve et
app.use(express.static('public'));

// Ana sayfa
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Odalar ve kullanÄ±cÄ±larÄ± sakla
const rooms = {};

io.on('connection', (socket) => {
  console.log('ðŸŸ¢ Yeni kullanÄ±cÄ± baÄŸlandÄ±:', socket.id);

  // Odaya katÄ±lma
  socket.on('join_room', (data) => {
    const { username, roomId } = data;
    
    // Ã–nceki odadan ayrÄ±l
    if (socket.currentRoom) {
      socket.leave(socket.currentRoom);
      if (rooms[socket.currentRoom]) {
        rooms[socket.currentRoom].delete(socket.username);
        // Ã–nceki odadaki kullanÄ±cÄ±lara bildir
        socket.to(socket.currentRoom).emit('user_left', {
          username: socket.username,
          users: Array.from(rooms[socket.currentRoom])
        });
      }
    }
    
    // Yeni odaya katÄ±l
    socket.join(roomId);
    socket.username = username;
    socket.currentRoom = roomId;
    
    // Oda yoksa oluÅŸtur
    if (!rooms[roomId]) {
      rooms[roomId] = new Set();
    }
    
    // KullanÄ±cÄ±yÄ± odaya ekle
    rooms[roomId].add(username);
    
    // KullanÄ±cÄ±ya baÅŸarÄ± mesajÄ± gÃ¶nder
    socket.emit('join_success', {
      room: roomId,
      username: username,
      users: Array.from(rooms[roomId])
    });
    
    // DiÄŸer kullanÄ±cÄ±lara bildir
    socket.to(roomId).emit('user_joined', {
      username: username,
      users: Array.from(rooms[roomId])
    });
    
    // Sistem mesajÄ± gÃ¶nder
    socket.to(roomId).emit('system_message', `${username} odaya katÄ±ldÄ±!`);
    
    console.log(`ðŸ‘¤ ${username} -> ${roomId} odasÄ±na katÄ±ldÄ±`);
  });

  // Mesaj gÃ¶nderme
  socket.on('send_message', (data) => {
    const { message, room, username } = data;
    
    // MesajÄ± aynÄ± odadaki herkese gÃ¶nder (gÃ¶nderen hariÃ§)
    socket.to(room).emit('new_message', {
      username: username,
      message: message,
      timestamp: new Date().toLocaleTimeString('tr-TR', { 
        hour: '2-digit', 
        minute: '2-digit' 
      })
    });
    
    console.log(`ðŸ’¬ ${username}: ${message}`);
  });

  // Odadan ayrÄ±lma
  socket.on('leave_room', () => {
    if (socket.currentRoom && socket.username) {
      // KullanÄ±cÄ±yÄ± odadan Ã§Ä±kar
      if (rooms[socket.currentRoom]) {
        rooms[socket.currentRoom].delete(socket.username);
        
        // DiÄŸer kullanÄ±cÄ±lara bildir
        socket.to(socket.currentRoom).emit('user_left', {
          username: socket.username,
          users: Array.from(rooms[socket.currentRoom])
        });
        
        socket.to(socket.currentRoom).emit('system_message', 
          `${socket.username} odadan ayrÄ±ldÄ±.`);
        
        // Oda boÅŸsa sil
        if (rooms[socket.currentRoom].size === 0) {
          delete rooms[socket.currentRoom];
        }
      }
      
      socket.leave(socket.currentRoom);
      console.log(`ðŸ‘‹ ${socket.username} ${socket.currentRoom} odasÄ±ndan ayrÄ±ldÄ±`);
      
      socket.currentRoom = null;
      socket.username = null;
    }
  });

  // BaÄŸlantÄ± koptuÄŸunda
  socket.on('disconnect', () => {
    console.log('ðŸ”´ KullanÄ±cÄ± ayrÄ±ldÄ±:', socket.id);
    
    if (socket.currentRoom && socket.username) {
      if (rooms[socket.currentRoom]) {
        rooms[socket.currentRoom].delete(socket.username);
        
        socket.to(socket.currentRoom).emit('user_left', {
          username: socket.username,
          users: Array.from(rooms[socket.currentRoom])
        });
        
        socket.to(socket.currentRoom).emit('system_message', 
          `${socket.username} baÄŸlantÄ±sÄ± koptu.`);
        
        if (rooms[socket.currentRoom].size === 0) {
          delete rooms[socket.currentRoom];
        }
      }
    }
  });
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`ðŸš€ Sunucu http://localhost:${PORT} adresinde Ã§alÄ±ÅŸÄ±yor`);
});